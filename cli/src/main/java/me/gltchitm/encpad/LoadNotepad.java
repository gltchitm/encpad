package me.gltchitm.encpad;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.regex.Pattern;

import com.googlecode.lanterna.gui2.WindowBasedTextGUI;
import com.googlecode.lanterna.gui2.dialogs.FileDialogBuilder;
import com.googlecode.lanterna.gui2.dialogs.MessageDialogBuilder;
import com.googlecode.lanterna.gui2.dialogs.MessageDialogButton;
import com.googlecode.lanterna.gui2.dialogs.TextInputDialog;

import org.json.JSONArray;
import org.json.JSONObject;

public class LoadNotepad {
    private final static String encryptedDisclaimer = (
        "[DANGER]\n" +
        "This file is ENCRYPTED. It must be opened in Encpad " +
        "(or a compatible editor/viewer)!\n" +
        "Do NOT edit this file in a normal text editor -- " +
        "doing so may cause permanent data loss!\n" +
        "-=-=-=-=-=-=-=-=-=-=-=-\n"
    );
    private static void showBadDecryptDialog(WindowBasedTextGUI textGUI) {
        new MessageDialogBuilder()
            .setTitle("Bad Decrypt")
            .setText("You may have entered an incorrect password.")
            .addButton(MessageDialogButton.OK)
            .build()
            .showDialog(textGUI);
    }
    private static Notepad readPasswordAndDecrypt(String encryptedText, WindowBasedTextGUI textGUI) throws IOException {
        String password = TextInputDialog.showPasswordDialog(
            textGUI,
            "Unlock Notepad",
            "Enter the password to unlock this notepad.",
            ""
        );
        if (password == null) {
            return loadNotepad(textGUI);
        }
        try {
            JSONObject encryptedNotepad = new JSONObject(new String(Base64Util.decode(encryptedText)));

            String decryptedNotes = Crypto.decrypt(encryptedNotepad.getString("notes"), password);

            if (decryptedNotes == null) {
                showBadDecryptDialog(textGUI);
                return readPasswordAndDecrypt(encryptedText, textGUI);
            }

            return new Notepad(encryptedNotepad.getInt("untitled_number"), new JSONArray(decryptedNotes));
        } catch (Exception exception) {
            showBadDecryptDialog(textGUI);
            return readPasswordAndDecrypt(encryptedText, textGUI);
        }
    
    }
    public static Notepad loadNotepad(WindowBasedTextGUI textGUI) throws IOException {
        File file = new FileDialogBuilder()
            .setTitle("Load Notepad")
            .setActionLabel("Load")
            .build()
            .showDialog(textGUI);
        if (file == null) {
            System.exit(0);
        }

        String encryptedText = Files.readString(file.toPath()).replaceFirst(Pattern.quote(encryptedDisclaimer), "");

        return readPasswordAndDecrypt(encryptedText, textGUI);
    }
}
