import hmac

from hashlib import pbkdf2_hmac, sha256
from Crypto.Cipher import AES
from base64 import b64decode
from json import loads

def can_migrate_notepad(encrypted_notepad):
    if encrypted_notepad.startswith(
        b'[DANGER]\n'
        b'This file is ENCRYPTED. It must be opened in Encpad '
        b'(or a compatible editor/viewer)!\n'
        b'Do NOT edit this file in a normal text editor -- '
        b'doing so may cause permanent data loss!\n'
        b'-=-=-=-=-=-=-=-=-=-=-=-\n'
    ):
        json_data = loads(b64decode(encrypted_notepad.split(b'\n')[-1]))
        return json_data['version'] == '0.1.0-beta'

    return False

def migrate_notepad(encrypted_notepad, password):
    data = loads(b64decode(encrypted_notepad.split(b'\n')[-1]))
    encrypted_notes = loads(b64decode(data['notes']))

    cipher_text = b64decode(encrypted_notes['cipher_text'])
    key = pbkdf2_hmac(
        'sha512',
        password,
        bytes(encrypted_notes['salt'], 'utf-8'),
        500_000,
        32
    )
    cipher = AES.new(key, AES.MODE_CBC, bytes(encrypted_notes['iv'], 'utf-8'))
    decrypted_notes = cipher.decrypt(cipher_text).rstrip().decode('utf-8')

    if not hmac.compare_digest(
        hmac.new(
            key,
            bytes(decrypted_notes, 'utf-8'),
            sha256
        ).hexdigest(),
        encrypted_notes['hmac']
    ):
        raise Exception('compare hmac failed')

    return {
        'untitled_number': data['untitled_number'],
        'notes': loads(decrypted_notes)
    }
